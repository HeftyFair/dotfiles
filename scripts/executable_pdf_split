#!/bin/bash

# --- Default Configuration ---
CHUNK_SIZE=150 # Number of pages per output file
SEND_TO_YOINK=0 # Flag: 0=no, 1=yes
INPUT_PDF=""
OUTPUT_DIR="" # Will be determined later
TMP_DIR=""    # Holds temporary directory path if used

# --- Function Definitions ---
usage() {
  echo "Usage: $0 [options] <input_pdf_file>"
  echo ""
  echo "Splits the input PDF into chunks of a specified size."
  echo "If --yoink is specified, chunks are created in a temporary directory"
  echo "and sent to Yoink; otherwise, they are created alongside the input file."
  echo ""
  echo "Options:"
  echo "  -s, --size NUM    Number of pages per chunk (default: $CHUNK_SIZE)"
  echo "  -y, --yoink       Create chunks in a temp dir and send to Yoink app (macOS)"
  echo "  -h, --help        Display this help message"
  echo ""
  echo "Example:"
  echo "  $0 my_document.pdf                # Split into 150-page chunks in current dir"
  echo "  $0 -s 50 my_document.pdf          # Split into 50-page chunks in current dir"
  echo "  $0 -y -s 100 large_manual.pdf     # Split into 100-page chunks in temp dir, send to Yoink"
}

# Cleanup function for temporary directory
cleanup() {
  if [ -n "$TMP_DIR" ] && [ -d "$TMP_DIR" ]; then
    # echo "Cleaning up temporary directory: $TMP_DIR" # Optional debug message
    rm -rf "$TMP_DIR"
  fi
}

# Set trap to ensure cleanup happens on exit, interrupt, or termination
trap cleanup EXIT INT TERM HUP

# --- Option Parsing ---
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -s|--size)
            if [[ "$2" =~ ^[0-9]+$ ]] && [ "$2" -gt 0 ]; then
                CHUNK_SIZE="$2"
                shift # past argument
            else
                echo "Error: --size requires a positive integer argument." >&2
                exit 1
            fi
            ;;
        -y|--yoink)
            SEND_TO_YOINK=1
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*) # Unknown option
            echo "Error: Unknown option: $1" >&2
            usage
            exit 1
            ;;
        *) # Positional argument (should be the input file)
            if [ -z "$INPUT_PDF" ]; then
              INPUT_PDF="$1"
            else
              echo "Error: Too many arguments. Specify only one input PDF file." >&2
              usage
              exit 1
            fi
            ;;
    esac
    shift # past argument or value
done

# --- Input Validation ---
if [ -z "$INPUT_PDF" ]; then
  echo "Error: No input PDF file specified." >&2
  usage
  exit 1
fi

# Resolve the input path to an absolute path for robustness
INPUT_PDF_ABS=$(cd "$(dirname "$INPUT_PDF")" && pwd)/$(basename "$INPUT_PDF")

if [ ! -f "$INPUT_PDF_ABS" ]; then
  echo "Error: Input file '$INPUT_PDF_ABS' not found." >&2
  exit 1
fi

# --- Determine Output Directory ---
if [ "$SEND_TO_YOINK" -eq 1 ]; then
    # Create a temporary directory
    TMP_DIR=$(mktemp -d)
    if [ $? -ne 0 ] || [ -z "$TMP_DIR" ] || [ ! -d "$TMP_DIR" ]; then
        echo "Error: Failed to create temporary directory." >&2
        exit 1
    fi
    OUTPUT_DIR="$TMP_DIR"
    echo "Using temporary directory for output: $OUTPUT_DIR"
else
    # Use the directory of the input file
    OUTPUT_DIR=$(dirname -- "$INPUT_PDF_ABS")
    echo "Using input file directory for output: $OUTPUT_DIR"
fi

# --- Check for Dependencies ---
if ! command -v qpdf &> /dev/null; then
    echo "Error: 'qpdf' command not found. Please install qpdf." >&2
    exit 1 # Exit here, qpdf is mandatory
fi

# --- Get PDF Information ---
TOTAL_PAGES=$(qpdf --show-npages "$INPUT_PDF_ABS" 2>/dev/null)

# Validate page count
if [ $? -ne 0 ] || ! [[ "$TOTAL_PAGES" =~ ^[0-9]+$ ]]; then
  echo "Error: Could not determine the number of pages for '$INPUT_PDF_ABS'. Is it a valid PDF?" >&2
  exit 1
fi

if [ "$TOTAL_PAGES" -le 0 ]; then
  echo "Error: PDF has 0 or fewer pages ($TOTAL_PAGES). Cannot split." >&2
  exit 1
fi

# --- Calculate Splitting Parameters ---
NUM_CHUNKS=$(( (TOTAL_PAGES + CHUNK_SIZE - 1) / CHUNK_SIZE ))
PAD_WIDTH=${#NUM_CHUNKS}
FILENAME=$(basename -- "$INPUT_PDF_ABS")
EXTENSION="${FILENAME##*.}"
BASENAME="${FILENAME%.*}"
if [[ "$BASENAME" == "$FILENAME" ]]; then
    EXTENSION="pdf"
fi
# Construct the prefix using the determined OUTPUT_DIR
OUTPUT_PREFIX="${OUTPUT_DIR}/${BASENAME}_part"


echo "Input PDF: '$INPUT_PDF_ABS'"
echo "Total Pages: $TOTAL_PAGES"
echo "Pages per Chunk: $CHUNK_SIZE"
echo "Number of Output Files: $NUM_CHUNKS"
echo "Output File Prefix: '${OUTPUT_PREFIX}'"
echo "Send to Yoink: $(if [ "$SEND_TO_YOINK" -eq 1 ]; then echo 'Yes (using open -a Yoink)'; else echo 'No'; fi)"
echo "---"

# --- Splitting Loop ---
declare -a OUTPUT_FILES_ABS=() # Array to store ABSOLUTE paths of created files
ALL_SPLITS_SUCCESSFUL=1   # Flag to track overall success

CURRENT_PAGE=1
for (( i=1; i<=NUM_CHUNKS; i++ )); do
  START_PAGE=$CURRENT_PAGE
  END_PAGE=$(( CURRENT_PAGE + CHUNK_SIZE - 1 ))

  if [ "$END_PAGE" -gt "$TOTAL_PAGES" ]; then
    END_PAGE=$TOTAL_PAGES
  fi

  PART_NUM=$(printf "%0${PAD_WIDTH}d" "$i")
  # Construct the full path for the output file using OUTPUT_PREFIX
  OUTPUT_PDF_PATH="${OUTPUT_PREFIX}_${PART_NUM}.${EXTENSION}"

  echo "Creating '$OUTPUT_PDF_PATH' (Pages $START_PAGE-$END_PAGE)..."

  # Use absolute input path and the determined output path
  qpdf "$INPUT_PDF_ABS" --pages . "$START_PAGE-$END_PAGE" -- "$OUTPUT_PDF_PATH"

  if [ $? -ne 0 ]; then
    echo "Error creating '$OUTPUT_PDF_PATH'. Aborting further splits." >&2
    ALL_SPLITS_SUCCESSFUL=0
    break # Stop the loop on error
  else
    # Store the absolute path (which it already is now)
    OUTPUT_FILES_ABS+=("$OUTPUT_PDF_PATH")
  fi

  CURRENT_PAGE=$(( END_PAGE + 1 ))

  if [ "$CURRENT_PAGE" -gt "$TOTAL_PAGES" ] && [ "$i" -lt "$NUM_CHUNKS" ]; then
      echo "Warning: Page count logic error detected after processing part $i. Stopping." >&2
      ALL_SPLITS_SUCCESSFUL=0
      break
  fi
done

echo "---"

# --- Final Actions ---
if [ "$ALL_SPLITS_SUCCESSFUL" -eq 1 ]; then
    echo "Successfully split '$INPUT_PDF_ABS' into ${#OUTPUT_FILES_ABS[@]} parts in '$OUTPUT_DIR'."

    # Send to Yoink if requested and successful
    if [ "$SEND_TO_YOINK" -eq 1 ] && [ ${#OUTPUT_FILES_ABS[@]} -gt 0 ]; then
        echo "Sending ${#OUTPUT_FILES_ABS[@]} created files to Yoink via 'open -a Yoink'..."
        # Use absolute paths stored in the array
        open -a Yoink "${OUTPUT_FILES_ABS[@]}"
        if [ $? -ne 0 ]; then
            echo "Warning: Command 'open -a Yoink' failed. Ensure Yoink is installed and accessible." >&2
            # Files remain in the temp directory, which will be cleaned up by the trap
        else
            echo "Files sent to Yoink. Temporary files will be cleaned up on exit."
            # The trap will handle cleanup
        fi
    elif [ "$SEND_TO_YOINK" -eq 1 ]; then
        echo "No files were successfully created to send to Yoink." >&2
    fi
    exit 0 # Success
else
    echo "Splitting process failed or was interrupted." >&2
    # Cleanup trap will still run on exit
    exit 1 # Failure
fi

# The script exits here, and the 'trap cleanup' command runs automatically.
