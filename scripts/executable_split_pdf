#!/bin/bash

# --- Configuration ---
CHUNK_SIZE=150 # Number of pages per output file
# --- End Configuration ---

# --- Input Validation ---
if [ -z "$1" ]; then echo "Usage: $0 <input_pdf_file>"
  echo "Error: No input PDF file specified."
  exit 1
fi

INPUT_PDF="$1"

if [ ! -f "$INPUT_PDF" ]; then
  echo "Error: Input file '$INPUT_PDF' not found."
  exit 1
fi

# --- Get PDF Information ---
# Check if qpdf is installed and accessible
if ! command -v qpdf &> /dev/null; then
    echo "Error: 'qpdf' command not found. Please install qpdf."
    exit 1
fi

# Get total number of pages using qpdf
TOTAL_PAGES=$(qpdf --show-npages "$INPUT_PDF" 2>/dev/null)

# Validate page count
if [ $? -ne 0 ] || ! [[ "$TOTAL_PAGES" =~ ^[0-9]+$ ]]; then
  echo "Error: Could not determine the number of pages for '$INPUT_PDF'. Is it a valid PDF?"
  exit 1
fi

if [ "$TOTAL_PAGES" -le 0 ]; then
  echo "Error: PDF has 0 or fewer pages ($TOTAL_PAGES). Cannot split."
  exit 1
fi

# --- Calculate Splitting Parameters ---
# Calculate the total number of chunks needed (ceiling division)
NUM_CHUNKS=$(( (TOTAL_PAGES + CHUNK_SIZE - 1) / CHUNK_SIZE ))

# Determine padding for part numbers (e.g., 01, 02,... or 001, 002,...)
# This helps keep filenames sorted correctly
PAD_WIDTH=${#NUM_CHUNKS}

# Extract filename without extension and directory for output naming
FILENAME=$(basename -- "$INPUT_PDF")
EXTENSION="${FILENAME##*.}"
BASENAME="${FILENAME%.*}" # Everything before the last dot
# Handle cases with no extension
if [[ "$BASENAME" == "$FILENAME" ]]; then
    EXTENSION="pdf" # Default to .pdf if no extension found
fi
OUTPUT_PREFIX="${BASENAME}_part"

echo "Input PDF: '$INPUT_PDF'"
echo "Total Pages: $TOTAL_PAGES"
echo "Pages per Chunk: $CHUNK_SIZE"
echo "Number of Output Files: $NUM_CHUNKS"
echo "Output File Prefix: '${OUTPUT_PREFIX}'"
echo "---"

# --- Splitting Loop ---
CURRENT_PAGE=1
for (( i=1; i<=NUM_CHUNKS; i++ )); do
  START_PAGE=$CURRENT_PAGE
  # Calculate end page for this chunk
  END_PAGE=$(( CURRENT_PAGE + CHUNK_SIZE - 1 ))

  # Adjust end page for the very last chunk if it exceeds total pages
  if [ "$END_PAGE" -gt "$TOTAL_PAGES" ]; then
    END_PAGE=$TOTAL_PAGES
  fi

  # Format part number with leading zeros
  PART_NUM=$(printf "%0${PAD_WIDTH}d" "$i")
  OUTPUT_PDF="${OUTPUT_PREFIX}_${PART_NUM}.${EXTENSION}"

  echo "Creating '$OUTPUT_PDF' (Pages $START_PAGE-$END_PAGE)..."

  # Perform the split using qpdf
  # The '.' tells qpdf to use the primary input file for page selection
  qpdf "$INPUT_PDF" --pages . "$START_PAGE-$END_PAGE" -- "$OUTPUT_PDF"

  # Check if qpdf command was successful
  if [ $? -ne 0 ]; then
    echo "Error creating '$OUTPUT_PDF'. Aborting."
    # Optional: You might want to clean up files created so far
    # rm -f "${OUTPUT_PREFIX}_"*".${EXTENSION}"
    exit 1
  fi

  # Update current page for the next iteration
  CURRENT_PAGE=$(( END_PAGE + 1 ))

  # Safety break if something goes wrong with page counting
  if [ "$CURRENT_PAGE" -gt "$TOTAL_PAGES" ] && [ "$i" -lt "$NUM_CHUNKS" ]; then
      echo "Warning: Page count logic error detected after processing part $i. Stopping."
      break
  fi

done

echo "---"
echo "Successfully split '$INPUT_PDF' into $NUM_CHUNKS parts."
exit 0
